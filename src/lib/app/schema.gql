# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddPresidentsTurnInput {
  cardsPlayed: [ID!]!
  forPlayer: ID!
  id: ID!
  wasPassed: Boolean!
}

type Card implements Instance {
  _id: ID!
  cardRank: CardRank!
  shortHand: String!
  suit: Suit!
}

type CardRank implements Instance {
  _id: ID!
  character: String!
  name: String!
  value: Int!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Deck implements DeckInterface & Instance {
  _id: ID!
  cards: [Card!]!
  name: String!
}

interface DeckInterface implements Instance {
  _id: ID!
  cards: [Card!]!
  name: String!
}

type DrinkRequest implements Instance {
  _id: ID!
  fromPlayer: ID!
  fulfilled: Boolean!
  fulfilledAt: DateTime!
  game: ID!
  sentAt: DateTime!
  toPlayer: ID!
}

interface Game implements Instance {
  _id: ID!
  config: GameConfiguration!
  createdAt: DateTime!
  createdByUser: ID!
  currentPlayer: ID!
  finishedAt: DateTime!
  name: String!
  startedAt: DateTime!
  status: GameStatus!
}

type GameConfiguration implements Instance {
  _id: ID!
  deck: Deck!
  maxPlayers: Int!
  minPlayers: Int!
  name: String!
  numDecks: Int!
}

type GameStatus implements Instance & Status {
  _id: ID!
  value: String!
}

input IdInput {
  id: ID!
}

interface Instance {
  _id: ID!
}

input JoinPresidentsGameInput {
  id: ID!
  userId: ID!
}

type Mutation {
  addPresidentsTurn(input: AddPresidentsTurnInput!): PresidentsGame!
  createGameAndAddUser(input: PresidentsGameInput!): PresidentsGame!
  fulfillDrinkRequest(input: IdInput!): PresidentsGame!
  joinGame(input: JoinPresidentsGameInput!): PresidentsGame!
  rematch(input: IdInput!): PresidentsGame!
  sendDrinkRequest(input: IdInput!): PresidentsGame!
}

"""Mongo object id scalar type"""
scalar ObjectId

interface Player implements Instance {
  _id: ID!
  cards: [Card!]!
  displayId: String!
  game: ID!
  seatPosition: Int!
  user: ID!
}

type PoliticalRank implements Instance {
  _id: ID!
  name: String!
  value: Int!
}

type PresidentsDeck implements DeckInterface & Instance {
  _id: ID!
  cards: [Card!]!
  name: String!
}

type PresidentsGame implements Game & Instance {
  _id: ID!
  config: GameConfiguration!
  createdAt: DateTime!
  createdByUser: ID!
  currentPlayer: ID!
  deck: PresidentsDeck!
  drinkRequests: [DrinkRequest!]!
  finishedAt: DateTime!
  name: String!
  players: [PresidentsPlayer!]!
  rounds: [PresidentsRound!]!
  startedAt: DateTime!
  status: GameStatus!
  turnToBeat: PresidentsTurn!
  winningPlayer: ID!
}

input PresidentsGameInput {
  config: ID!
  createdByUser: ID!
  name: String!
}

type PresidentsPlayer implements Instance & Player {
  _id: ID!
  cards: [Card!]!
  displayId: String!
  drinkRequestsReceived: [DrinkRequest!]!
  drinkRequestsSent: [DrinkRequest!]!
  drinksDrunk: Int!
  game: ID!
  nextGameRank: PoliticalRank!
  politicalRank: PoliticalRank!
  seatPosition: Int!
  user: ID!
  wonTheGame: Boolean!
}

type PresidentsRound implements Instance {
  _id: ID!
  game: ID!
  startedAt: DateTime!
  turns: [PresidentsTurn!]!
}

type PresidentsTurn implements Instance {
  _id: ID!
  cardsPlayed: [Card!]!
  didCauseSkips: Boolean!
  endedRound: Boolean!
  forPlayer: ID!
  skipsRemaining: Int!
  takenAt: DateTime!
  wasPassed: Boolean!
  wasSkipped: Boolean!
}

type Query {
  card(id: ObjectId!): Card!
  cardRank(id: ObjectId!): CardRank!
  cardRanks: [CardRank!]!
  cards: [Card!]!
  deck(id: ObjectId!): Deck!
  decks: [Deck!]!
  gameConfiguration(id: ObjectId!): GameConfiguration!
  gameConfigurations: [GameConfiguration!]!
  gameStatus(id: ObjectId!): GameStatus!
  gameStatuses: [GameStatus!]!
  player(id: ObjectId!): Player!
  players: [Player!]!
  presidentsGame(id: ObjectId!): PresidentsGame!
  presidentsGames: [PresidentsGame!]!
  securityDomain(id: ObjectId!): SecurityDomain!
  securityDomains: [SecurityDomain!]!
  status(id: ObjectId!): Status!
  statuses: [Status!]!
  suit(id: ObjectId!): Suit!
  suits: [Suit!]!
  user(id: ObjectId!): User!
  users: [User!]!
}

type SecurityDomain implements Instance {
  _id: ID!
  clearanceLevel: Int!
  name: String!
}

interface Status implements Instance {
  _id: ID!
  value: String!
}

type Subscription {
  drinkRequestFulfilled: PresidentsGame!
  drinkRequestSent: PresidentsGame!
  gameEnded: PresidentsGame!
  gameStarted: PresidentsGame!
  playerJoined: PresidentsGame!
  rematchStarted: PresidentsGame!
  turnTaken: PresidentsGame!
}

type Suit implements Instance {
  _id: ID!
  character: String!
  color: String!
  name: String!
  value: Int!
}

type User implements Instance {
  _id: ID!
  displayName: String!
  email: String!
  password: String!
  playerRecords: [ID!]!
  security: SecurityDomain!
  token: String!
  username: String!
}
